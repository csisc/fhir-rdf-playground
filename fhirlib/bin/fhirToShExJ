#!/usr/bin/env node

const Fs = require('fs');
const Path = require('path');
const FhirShExJGenerator = require('../FhirShExJGenerator.js');
const { program } = require('commander');

const Errors = [];
const GEN_SHEXJ_CONTEXT_CONFIG = {
  addValueSetVersionAnnotation: false, // handle e.g. "http://hl7.org/fhir/ValueSet/medicationrequest-status|4.6.0"
  oloIndexes: true,
  addTypesTo: ["Coding"],
  missing: {},
  error: (err) => {
    Errors.push(err);
  }
};

const indexFhir = (acc, entry) => {
  acc[entry.resource.id] = entry.resource;
  return acc;
};

program
  .version('0.0.2')
  .option('--flat', 'name and hoist all embeded shapes (default)')
  .option('--nest', 'embed shapes where possible')
  .arguments('<resources> <datatypes> <valuesets> <result>')
  .action(generate)
  .parse(process.argv);

// generate(process.argv.slice(2));
// async function generate([resources, datatypes, valuesets, got]) {

async function generate(resources, datatypes, valuesets, result) {
  try {
    const [parsedResources, parsedDatatypes, parsedValuesets] =
          await Promise.all(
            [resources, datatypes, valuesets].map(readJsonProfile)
          );
    let generator = new FhirShExJGenerator(
        parsedResources,
        parsedDatatypes,
        parsedValuesets,
        GEN_SHEXJ_CONTEXT_CONFIG
    );
    const raw = await generator.genShExJ([parsedResources, parsedDatatypes, parsedValuesets]);
    if (Errors.length > 0) {
      console.error("Errors from run:\n", Errors);
    }
    const schema = program.opts().nest
        ? FhirShExJGenerator.nestShapes(raw)
        : raw;

    await writeShExJ(result, schema, true); // TODO: add switch for pretty-printing
    console.log(`wrote ${schema.shapes.length} shape expressions into ${result}`);
    // if (errors.length) {
    //   console.log(`writing ${errors.length} errors to stderr`);
    //   errors.forEach(e => console.warn("error trying to genShExJ:" + e.stack));
    // }
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
};

// Write to disk with long-lines
async function writeShExJ(filename, schema, longLines) {
  const head = `{
  "type": "Schema",
  "shapes": [
`;
  const tail = `  ],
  "@context": "http://www.w3.org/ns/shex.jsonld"
}
`;
  await Fs.promises.writeFile(
      filename,
      longLines
          ? head + schema.shapes.map((se, idx) => JSON.stringify(se) + (idx === schema.shapes.length - 1 ? '' : ',') + '\n').join('') + tail
          : JSON.stringify(schema, null, 2)
  );
}

async function readJsonProfile (path) {
  const text = await Fs.promises.readFile(path, 'utf8');
  const obj = JSON.parse(text);
  return obj;
}
