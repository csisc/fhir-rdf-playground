#!/usr/bin/env node

const Fs = require('fs');
const Path = require('path');
const FhirShExJGenerator = require('../FhirShExJGenerator.js');

const GEN_SHEXJ_CONTEXT_CONFIG = {
  addValueSetVersionAnnotation: false, // handle e.g. "http://hl7.org/fhir/ValueSet/medicationrequest-status|4.6.0"
  oloIndexes: true,
  addTypesTo: ["Coding"],
  missing: {},
};

const GEN_SHEXJ_STEM = 'http://hl7.org/fhir/StructureDefinition/';
const CODE_SYSTEM_STEM = 'http://hl7.org/fhir/CodeSystem/';
const VALUE_SET_STEM = 'http://hl7.org/fhir/ValueSet/';
const CAPABILITY_STATEMENT_BASE = 'http://hl7.org/fhir/CapabilityStatement/';
const COMPARTMENT_DEFINITION_BASE = 'http://hl7.org/fhir/CompartmentDefinition/';
const OPERATION_DEFINITION_BASE = 'http://hl7.org/fhir/OperationDefinition/';

const indexFhir = (acc, entry) => {
  acc[entry.resource.id] = entry.resource;
  return acc;
};

generate(process.argv.slice(2));

async function generate([resources, datatypes, valuesets, got]) {
  try {
    const parsedResources = await readJsonProfile(resources);
    const parsedDatatypes = await readJsonProfile(datatypes);
    const parsedValuesets = await readJsonProfile(valuesets);
    let generator = new FhirShExJGenerator(
        parsedResources,
        parsedDatatypes,
        parsedValuesets,
        GEN_SHEXJ_CONTEXT_CONFIG
    );
    const ret = await generator.genShExJ();

    await writeShExJ(got, ret, true); // TODO: add switch for pretty-printing
    console.log(`wrote ${ret.shapes.length} shape expressions into ${got}`);
    // if (errors.length) {
    //   console.log(`writing ${errors.length} errors to stderr`);
    //   errors.forEach(e => console.warn("error trying to genShExJ:" + e.stack));
    // }
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
};

// Write to disk with long-lines
async function writeShExJ(filename, schema, longLines) {
  const head = `{
  "type": "Schema",
  "shapes": [
`;
  const tail = `  ],
  "@context": "http://www.w3.org/ns/shex.jsonld"
}
`;
  await Fs.promises.writeFile(
      filename,
      longLines
          ? head + schema.shapes.map((se, idx) => JSON.stringify(se) + (idx === schema.shapes.length - 1 ? '' : ',') + '\n').join('') + tail
          : JSON.stringify(schema, null, 2)
  );
}

async function readJsonProfile (path) {
  const text = await Fs.promises.readFile(path, 'utf8');
  const obj = JSON.parse(text);
  return obj;
}
